===== Concepte =====


==== Intro ====
Toate dispozitivele electronice pe care le folosim in viata de zi cu zi, de la
latopuri sau calculatoare personale, pana la telefoane mobile sau smart watch-uri,
toate au in comun un lucru: ruleaza software. Avand in vedere cat de variate
sunt sistemele pe care ruleaza aplicatiile, este important sa se cunoasca principalii
factori care influenteaza deciziile luate in vederea crearii uneia.
De exemplu, daca aplicatia noastra este gandita pentru un ceas inteligent, atunci
trebuie avut in vedere faptul ca resursele vor fi limitate; apare astfel o constrangere
din punctul de vedere al memoriei disponibile.
Este important de retinut ca atunci cand scriem o aplicatie trebuie luata in
considerarea atat partea software cat si hardware. Cea din urma depaseste scopul
laboratorului curent si va fi reluata in cursurile viitoare.

Astfel, principalele elemente pe care le vom analiza in continuare sunt:
  * alegerea limbajului de programare potrivit
  * scrierea si compilarea codului sursa
  * depanarea programelor
  * versionarea codului

==== Limbaje de programare ====

Bazat pe modul în care codul de nivel înalt este transformat și rulat pe procesor,
putem clasifica limbajele de programare în limbaje compilate sau interpretate.
Diferența între cele două este că pentru a rula un limbaj compilat, acesta este
întâi transformat în limbaj mașină, rezultând un fișier executabil, care apoi poate
fi rulat oricând. Pe de altă parte, un limbaj interpretat este executat direct, prin
intermediul unui interpretor. Interpretorul este cel care ia fiecare instrucțiune, o
transformă în cod mașină iar aceasta este executată imediat.

In functie de scopul aplicatiei noastre, trebuie sa stim sa alegem limbajul de
programare adecvat; de exemplu, limbajele compilate (precum C/C++) au avantajul
timpului de executie mai rapid, pe cand cele interpretate (PHP/Perl) au mai multa
portabilitate, interpretorul fiind cel care transforma codul sursa in cod masina
specific procesorului.

Exista si o a treia categorie de limbaje si anume limbajele hibride, care incapsuleaza
elemente de compilare cu elemente de incapsulare.
Pentru că principalul dezavantaj al programelor interpretate este timpul mare de execuție,
una din îmbunătățirile aduse interpretoarelor este posibilitatea de a transforma
codul sursă într-un cod intermediar, care se numește bytecode, care va fi apoi interpretat.
Bytecode-ul este practic codul mașină al interpretorului, deci transformarea acestuia
în cod mașină este mult mai rapidă. Practic, la rularea unui program, este generat un
fișier intermediar care conține bytecode, iar interpretorul ia apoi instrucțiuni
din bytecode și le transformă în cod mașină. Putem deci considera că avem două etape
în procesul de rulare: compilare către bytecode și apoi interpretare.
Un astfel de limbaj este Python/Java/C#.

==== Scrierea si compilarea codului sursa ====

=== Scrierea codului ===

Dezvoltarea unei aplicatii consta in scrierea efectiva a codului sursa, adica in
crearea si editarea fisierelor.
Exista o mare varietate de editoare de text, de la unele foarte simple, pana la
unele foarte complexe, care ofera o multitudine de functionalitati precum:
indentarea automata a codului, syntax-highlighting, semnalarea erorilor etc.
Ținând cont de numărul mare de limbaje de programare existente, fiecare cu
particularitățile sale, este imposibil ca un editor să cuprinsă toate aspectele
fiecărui limbaj. De aceea, majoritatea acestor editoare permit instalarea de extensii
care aduc funcționalități în plus sau aduc funcționalități specifice pentru un anumit limbaj.
Printre cele mai populare editoare de text se numara Vim, Sublime, Atom, Visual Studio Code.
Pe langa editoare de text avansate putem utiliza un mediu integrat de dezvoltare (IDE).
IDE-urile au anumite functionalitati  avansate, multe dintre ele fiind adaptate
unui singur limbaj de programare, iar in plus ele au integrat un compilator/interpretor
pentru limbajul suportat. Astfel, la o simpla apasare de buton programul este rulat.
Printre IDE-urile preferate se numara: Microsoft Visual Studio, Eclipse, IntelliJ, XCode.

=== Compilarea ===

Procesul de compilare presupune obtinerea unui executabil din codul sursa.
Acesta are urmatoarele etape intermediare:
  1. Preprocesare: operatiile care au loc in aceasta faza sunt prelucrarea directivelor
  de preprocesare (liniile care încep cu caracterul #): expandarea macrodefinitiilor
  si includerea fisierelor.
  Rezultatul este un fisier cu extensia .i.
  2. Compilare: codul preprocesat este transformat in cod limbaj de asamblare.
  Rezultatul este un fisier cu extensia .s.
  3. Asamblare: codul din limbaj de asamblare este transformat in cod obiect.
  Rezultatul este un fisier cu extensia .o.
  4. Link-editare: "leaga" intre ele mai multe fisiere obiect si creeaza fisierul
  executabil.

 <note>
Sectiunea urmatoare se refera la dezvoltarea in C/C++, acestea fiind limbajele
pe care le veti utiliza si in cadrul cursurilor din facultate.
 </note>

 Compilatorul cel mai folosit pentru C/C++ este gcc/g++.
 La simpla rulare a comenzii gcc, se trece prin toate etapele mentionate,
 obtinandu-se la final executabilul, insa exista optiuni pentru a intrerupe procesul
 dupa un anumit pas al compilarii. (man gcc)

 De exemplu, urmatoarea comanda va genera executabilul ''main''.

 <code bash>
gcc main.c -o main
</code>

La fiecare modificare adusa programului sursa, toate comenzile de compilare trebuie
rulate din nou, lucru ce poate sa devina obositor/problematic atunci cand este
vorba de un proiect complex. Astfel, au aparut makefile-urile, fisiere care
contin aceste comenzi si le pot rula pe toate printr-un singur apel.
In concluzie, scopul makefile-urilor este de a automatiza procesul de compilare.

<note>
Mai multe informatii despre makefile-uri vor fi prezentate in sectiunea ''Demo''.
</note>

=== Depanarea programelor ===

Foarte rar se va intampla sa compilati codul cu succes din prima sau, in cazul fericit
in care reusiti asta, in urma rularii acesta sa functioneze asa cum va doriti.
De cele mai multe ori va veti lovi de warning-uri sau erori de compilare, iar atunci
cand reusiti sa le rezolvati pe acestea, sirul nefericit al evenimentelor va continua
si veti obtine rezultate eronate, segfault-uri etc.
Este important sa fim constienti ca o mare parte din timpul dezvoltarii unei aplicatii
va fi dedicata depanarii programului, de aceea este important sa fim eficienti in
descoperirea erorilor.

Cea mai simpla metoda pentru a depana un program este aceea de a afisa mesaje pe
parcursul executiei, astfel putem sa urmarim exact rezultatele intermediare obtinute
sau putem sa descoperim partea din cod ce creeaza probleme.
Aceasta este cea mai usoara si intuitiva metoda, insa pentru un program cu sute/mii
de linii de cod este foarte ineficienta.
Astfel au aparut debugger-ele, programe speciale cu o varietate de functionalitati;
  * iti permit sa opresti programul in anumite puncte ale executiei si sa
analizezi valorile variabilelor.
  * rularea programului pas cu pas
  * modificarea starii programului in timpul rularii

Unul dintre cele mai cunoscute utilitare pentru depanare este ''gdb''; el suporta
toate operatiile mentionate mai sus. (pentru o mai buna vizulizare a informatiei
folositi gdb-peda)

Good practice este sa nu scrieti blocuri mari de cod fara a le verifica pe parcurs;
testati functionarea corecta a programului pe parcursul dezvoltarii acestuia, altfel
va va fi mult mai dificil sa detetctati erorile.

=== Managementul si versionarea codului ===

In cadrul unui proiect complex o sa lucrati intr-o echipa si veti ajuta
la dezvoltarea doar a anumitor parti din programul final. In aceasta situatie
fiecare membru o sa creeze/va modifica fisiere cu cod sursa in paralel cu alte persoane.
Apare astfel necesitatea unei modalitati de a imparti codul si de a urmari in acelasi
timp cine ce modificari a adus programului.

Git este un sistem de management și versionare a codului sursă care permite aceasta
partajare dorita. Proiectul este stocat într-un repository. Repository-ul conține
fișierele efective ale proiectului și informații despre acesta.
Fiecare lucreaza la o versiune proprie a programului pe care o urca apoi online
si este integrata automat in proiect.

Operatiile de baza ce pot fi efectuate asupra unui repository sunt:
  * clone: se copiaza local intreg repository-ul; practic se creeaza pe sistemul
      vostru un director cu toate fisierele puse online la momentul clonarii.
  * commit:se salvează toate modificările aduse proiectului; starea actuală este
      salvată local. Daca modificarile nu sunt facute publice, atunci ceilalti
      colaboratori nu le vor putea vedea.
  * push: pentru publicarea modificarilor salvate prin commit.
  * pull: se descarca local ultimele modificari aduse de colaboratori in cadrul
      proiectului.
