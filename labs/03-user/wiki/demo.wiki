===== Demo =====

În acest demo vrem să ne acomodăm cu cele mai importante comenzi utilizate atunci când lucrăm cu utilizatori, grupurile de utilizatori sau permisiuni în Linux.

<note tip>
Să nu uităm de [[uso:resurse:cheatsheet|cheatsheetul]] pe care îl putem folosi ca să ne reamintim cele mai frecvente comenzi.
</note>

<note warning>
S-ar putea ca unele comenzi să nu fie instalate, folosiți ''sudo apt-get install <numele comeznii>'' pentru a le instala.
Exemplu: ''sudo apt-get install finger''.
</note>

==== Utilizatori privilegiați si neprivilegiați (id, finger, whoami) ====

În continuare, vom vedea cum aflăm câteva informații despre utilizatori și cum schimbăm utilizatorul cu care suntem autentificați.

În acest moment suntem siguri că în sistem exista cel puțin doi utilizatori, utilizatorul cu care ne-am logat (student) și utilizatorul root.

Pentru a afla informații despre un utilizator sau pentru a verifica dacă un anumit utilizator există, putem folosi comanda ''finger''.

<code bash>
student@uso:~$ finger student
Login: student                          Name: Student User
Directory: /home/student                Shell: /bin/bash
On since Sun Sep 16 15:07 (EEST) on :0 from :0 (messages off)
No mail.
No Plan.

student@uso:~$ finger root
Login: root                             Name: root
Directory: /root                        Shell: /bin/bash
Never logged in.
No mail.
No Plan.
</code>

În outputul comenzii observăm directorul home al utilizatorului, numele complet, shell-ul de login, etc.

O altă comandă utilă este ''id''. Cum numele sugerează, ne dă id-ul utilizatorului dar și id-urile grupurilor din care face parte utilizatorul curent.

<code bash>
student@uso:~$ id
uid=1000(student) gid=1000(student) groups=1000(student),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)
</code>

Pentru a vedea cu ce utilizator suntem logați putem folosi comanda ''whoami''.
<code bash>
student@uso:~$ whoami
student
</code>

==== Schimbarea utilizatorului curent (su) ====

Pentru a schimba utilizatorul cu care suntem autentificați folosim comanda ''su''.
Înlănțuirea de comenzi de mai jos schimbă utilizatorul ''student'' în utilizatorul ''root'', verifică că acum utilizatorul logat este ''root'', închide sesiunea utilizatorului ''root'' și revine la utilizatorul ''student' folosind comanda ''exit''.

<code bash>
student@uso:~$ su root
Password:
root@uso:/home/student# whoami
root
root@uso:/home/student# exit
exit
student@uso:~$
</code>

<note important>
De observat că atunci când schimbăm utilizatorul, nu se schimbă și directorul curent în directorul home al noului utilizator.
</note>

==== Gestiunea utilizatorilor (adduser/deluser) ====

În continuare vom crea noi utilizatori iar ulterior îi vom șterge. Pentru aceasta vom folosi comenzile ''adduser'' și ''deluser''.

<note important>
Cele două comenzi sunt de fapt niște scripturi ''wrapper'' scrise în [[https://www.perl.org|Perl]] prezente, în general, numai pe distribuții bazate pe [[http://www.debian.org|Debian]] (cum ar fi Ubuntu). Comenzile pe care le apelează ele în spate sunt ''useradd'' și ''userdel''.
</note>

Dorim să creăm utilizatorul ''bogdan''. Mai întâi verificăm că acesta nu există, după care îl creăm.

<code bash>
student@uso:~$ finger bogdan
finger: bogdan: no such user.
</code>

<code bash>
student@uso:~$ sudo adduser bogdan
Adding user `bogdan' ...
Adding new group `bogdan' (1002) ...
Adding new user `bogdan' (1002) with group `bogdan' ...
Creating home directory `/home/bogdan' ...
Copying files from `/etc/skel' ...
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
Changing the user information for bogdan
Enter the new value, or press ENTER for the default
	Full Name []: Bogdan
	Room Number []:
	Work Phone []:
	Home Phone []:
	Other []:
Is the information correct? [Y/n] Y
</code>

În outputul comenzii anterioare observăm mai multe informații utile la adăugarea unui nou utilizator:
  * se creează un nou grup cu același nume
  * se creează home-ul utilizatorului
  * directorul home va copia structura de fișiere și directoare din directorul ''/etc/skel''
  * se cere o parolă și celelalte informații care sunt afișate la apelul comenzii ''finger''.

<code bash>
bogdan@uso:~$ finger bogdan
Login: bogdan                           Name: Bogdan
Directory: /home/bogdan                 Shell: /bin/bash
Never logged in.
No mail.
No Plan.
</code>

După aceasta ne și autentificăm ca utilizatorul bogdan.

<code bash>
student@uso:~$ su - bogdan
Password:
bogdan@uso:~$ pwd
/home/bogdan
bogdan@uso:~$ whoami
bogdan
</code>

Dacă utilizatonul nu mai trebuie să existe în sistem, îl ștergem folosind comanda ''deluser''.

<code bash>
student@uso:~$ sudo deluser bogdan
Removing user `bogdan' ...
Warning: group `bogdan' has no more members.
Done.
student@uso:~$ finger bogdan
finger: bogdan: no such user.
</code>

==== Schimbarea parolei (passwd) ====

Pentru a schimba parola utilizatorului curent folosim comanda ''passwd'', fără argumente. De asemenea, dacă dorim schimbarea parolei altui utilizator, îi putem oferi comenzii ''passwd'' numele acestuia ca parametru. Mai departe vom vedea un exemplu de cum facem acest lucru.

<code bash>
student@uso:~$ passwd
Changing password for student.
(current) UNIX password:
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully

root@uso:~# passwd student
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
</code>

==== Drepturi pentru anumite comenzi (sudo) ====

Să presupunem că pe un sistem avem 100 de utilizatori și vrem ca toți să aibă drepturile necesare instalării de noi pachete, dar să nu poată adăuga/șterge alți utilizatori. Pe lângă faptul că ar fi foarte foarte nesigur ca 100 de persoane să știe parola contului de root, ar trebui să ne bazăm pe încrederea că ei nu vor face altceva decât să instaleze pachete. Soluția acestei probleme este comanda ''sudo''.

Dorim să instalăm pachetul ''cowsay''.

<code bash>
student@uso:~$ apt-get install cowsay
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?
</code>

După cum observăm din eroarea afișată în output, nu avem drepturi să instalăm pachete.

Pentru a rezolva această problemă folosim comanda ''sudo''.

<code bash>
student@uso:~$ sudo apt-get install cowsay
[sudo] password for student:
student@uso:~$ cowsay "Meuh"
 ______
< Meuh >
 ------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||


</code>

==== Ownership și permisiuni ====

Pentru a vedea ce permisiuni avem pe un anumit director sau fișier folosim comanda ''ls -l''.

<code bash>
student@uso:~$ ls -l
total 56
drwxr-xr-x  2 student student 4096 aug  6 17:41 Desktop
drwxr-xr-x  3 student student 4096 aug 20 21:00 Documents
drwxr-xr-x  2 student student 4096 aug  6 17:41 Downloads
drwxr-xr-x  2 student student 4096 aug  6 17:41 Music
drwxr-xr-x  2 student student 4096 aug  6 17:41 Pictures
drwxr-xr-x  2 student student 4096 aug  6 17:41 Public
drwxr-xr-x  2 student student 4096 aug  6 17:41 Templates
drwxr-xr-x  2 student student 4096 aug  6 17:41 Videos
-rw-r--r--  1 student student 8980 aug  6 17:37 examples.desktop
drwxr-xr-x 14 student student 4096 aug 20 20:57 uso.git
-rw-r--r--  1 student student 4827 aug 21 14:37 vm-actions-log.txt
</code>

Semnificația fiecărui câmp din outuput-ul anterior este prezentată în tabelul de mai jos, folosind ca exemplu informațiile afișate pentru directorul ''Desktop''.

^ Type of file ^ Permissions ^ Number of hard links ^ Owner ^ Group ^ Syze in bytes ^ Date and time of last modification ^ Name ^
| d | rwxr-xr-x | 2 | student | student | 4096 | aug  6 17:41 | Desktop |

Coloanele care ne interesează pe noi sunt: Permissions, Owner și Group.

Permisiunile sunt specificate pe fiecare fișier sau director și au următoarea structură:

^    d    ^    r (read)    ^    w (write)    ^    x (execute)    ^    r (read)    ^    w (write)    ^    x (execute)    ^    r (read)    ^    w (write)    ^    x (execute)    ^
| ::: ||    Owner permissions    |||    Group permissions    |||    Others permissions    |||
|    Type of file (directory)    |    4    |    2    |    1    |    4    |    2    |    1    |    4    |    2    |    1    |
| ::: |    7    |||    5    |||    5    |||

La crearea unui fișier sau director se alocă în mod automat permisiunile default. Aceste permisiuni pot fi modificate ulterior.

Pentru a modifica permisiunile unei resurse folosim comanda ''chmod''.

Mai întâi creăm un nou fișier, după care îi vom modifica permisiunile pe care le are.

<code bash>
student@uso:~$ touch testfile.sh
student@uso:~$ ls -l testfile.sh 
-rw-r--r-- 1 student student 0 sep 16 16:47 testfile.sh
</code>

Pentru a modifica permisiunile unui fișier există două metode:
  1. Folosind notația alfabetică: +/-[rwx]
  2. Folosind notația octală: 777 (drepturi depline: rwx), 700 (drepturi depline pentru owner)

După cum observăm, fișierul nou creat nu are drepturi de execuție și dorim să îi dăm acest drept, folosind ambele metode.

#1
<code bash>
student@uso:~$ chmod +x testfile.sh
student@uso:~$ ls -l testfile.sh
-rwxr-xr-x 1 student student 0 sep 16 16:47 testfile.sh

student@uso:~$ chmod -x testfile.sh
student@uso:~$ ls -l testfile.sh
-rw-r--r-- 1 student student 0 sep 16 16:47 testfile.sh
</code>

<note important>
Pentru a adăuga permisiuni folosim semnul + iar pentru a le șterge folosim -, urmat de permisiunile pe care dorim să le adăugăm, respectiv să le ștergem: r, w, x.
</note>

#2
<code bash>
student@uso:~$ ls -l testfile.sh
-rw-r--r-- 1 student student 0 sep 16 16:47 testfile.sh
student@uso:~$ chmod 755 testfile.sh
student@uso:~$ ls -l testfile.sh
-rwxr-xr-x 1 student student 0 sep 16 16:47 testfile.sh
</code>

